@model PagedList.IPagedList<ASC_Coil_Tracker_Production.Models.COILTABLE>
@using PagedList.Mvc;
<link href="~/Content/PagedList.css" rel="stylesheet" type="text/css" />

<!-- testing -->
<link href="~/Content/print.css" rel="stylesheet" type="text/css" />

@{ ViewBag.Title = "Index"; }

<!-- Show prompt if not logged in -->
@if (Session["Email"] == null)
{
    <span>You must be logged in to view this page!</span>
    @Html.ActionLink("Back to Login", "Login", "Home")
}
else
{
    <div class="row mb-3">
        <div class="col-md-4">
            <a href="@Url.Action("Create")" class="btn btn-primary mb-1">
                <i class="fas fa-plus"></i>
                Create New Coil Record
            </a>
        </div>
        <div class="col-md-4">
            @using (Html.BeginForm("Index", "Coil", FormMethod.Get))
            {
                <!-- hidden current fields -->
                @Html.Hidden("sortOrder", (object)ViewBag.CurrentSort)
                ;
                @Html.Hidden("currentFilter", (object)ViewBag.CurrentFilter)
                ;
                @Html.Hidden("currentSearchFilter", (object)ViewBag.CurrentSearchFilter)
                ;

                <label for="lengthFilter">Show:</label>
                @Html.DropDownList("LengthFilter", (SelectList)ViewBag.LengthList,
                    new
                         {
                             @id = "lengthFilter",
                             @class = "custom-select mx-2"
                         })
            }
        </div>
        <div class="col-md-4">
            @using (Html.BeginForm("Index", "Coil", FormMethod.Get,
                new
                {
                    @id = "searchForm",
                    @class = "form-inline justify-content-end"
                }))
            {
                <!-- hidden current fields -->
                @Html.Hidden("sortOrder", (object)ViewBag.CurrentSort)
                ;
                @Html.Hidden("currentLengthFilter", (object)ViewBag.CurrentLengthFilter)
                ;

                @Html.DropDownList("SearchFilter", (SelectList)ViewBag.SearchList,
                    new { @class = "custom-select mx-2" })

                <div class="input-group search-input-group">
                    @Html.TextBox("SearchString", ViewBag.CurrentFilter as string,
                        new
                        {
                            @id = "searchString",
                            @class = "form-control border-right-0",
                            @placeholder = "Search"
                        })

                    <!-- Search button -->
                    <span class="input-group-append">
                        <button type="submit"
                                class="btn btn-outline-secondary border-left-0">
                            <i class="fa fa-search"></i>
                        </button>
                    </span>
                </div>
            }
        </div>
    </div>

    <div id="coilTable" class="container-fluid container-table table-responsive p-0">
        <table class="table m-0">
            <thead>
                <tr>
                    <th>
                        <a href="@Url.Action("Index",
                                 new {
                                     sortOrder = ViewBag.IDSortParm,
                                     currentFilter = ViewBag.CurrentFilter,
                                     currentSearchFilter = ViewBag.CurrentSearchFilter,
                                     currentLengthFilter = ViewBag.CurrentLengthFilter})"
                           class="a-sort">
                            ID<i class="fa fa-fw fa-sort"></i>
                        </a>
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.FirstOrDefault().COLOR)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.FirstOrDefault().TYPE)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.FirstOrDefault().GAUGE)
                    </th>
                    <th class="print-hide">
                        @Html.DisplayNameFor(model => model.FirstOrDefault().WIDTH)
                    </th>
                    <th class="print-hide">
                        @Html.DisplayNameFor(model => model.FirstOrDefault().THICK)
                    </th>
                    <th class="print-hide">
                        @Html.DisplayNameFor(model => model.FirstOrDefault().YIELD)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.FirstOrDefault().LENGTH)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.FirstOrDefault().WEIGHT)
                    </th>
                    <th class="print-hide">
                        @Html.DisplayNameFor(model => model.FirstOrDefault().CUSTOMER)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.FirstOrDefault().NOTES)
                    </th>
                    <th class="print-hide"></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model)
                {
                    <tr>
                        <td>
                            @Html.ActionLink((item.ID).ToString(), "Details",
                                "Coil", new { id = item.ID }, null)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.COLOR)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.TYPE)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.GAUGE)
                        </td>
                        <td class="print-hide">
                            @Html.DisplayFor(modelItem => item.WIDTH)
                        </td>
                        <td class="print-hide">
                            @Html.DisplayFor(modelItem => item.THICK)
                        </td>
                        <td class="print-hide">
                            @Html.DisplayFor(modelItem => item.YIELD)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.LENGTH)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.WEIGHT)
                        </td>
                        <td class="print-hide">
                            @Html.DisplayFor(modelItem => item.CUSTOMER)
                        </td>
                        <td class="clamp">
                            @Html.DisplayFor(modelItem => item.NOTES)
                        </td>
                        <td class="print-hide">
                            <div class="btn-group d-flex" role="group">
                                <button type="button" class="btn btn-outline-primary dropdown-toggle" data-toggle="dropdown">
                                    Actions
                                </button>
                                <div class="dropdown-menu">
                                    <a href="@Url.Action("Print", new {id = item.ID})" class="dropdown-item">
                                        <i class="fas fa-print"></i>
                                        Print
                                    </a>
                                    <a href="@Url.Action("Edit", new {id = item.ID})" class="dropdown-item">
                                        <i class="fas fa-edit"></i>
                                        Edit
                                    </a>
                                    <a href="@Url.Action("Details", new {id = item.ID})" class="dropdown-item">
                                        <i class="fas fa-info-circle"></i>
                                        Details
                                    </a>
                                    <a href="@Url.Action("Create", "HistoryEvent", new {coilID = item.ID})" class="dropdown-item">
                                        <i class="fas fa-plus"></i>
                                        Add Record
                                    </a>
                                    <!-- Delete functionality disabled for coils.
                                    <a href="@Url.Action("Delete", new {id = item.ID})" class="dropdown-item">
                                        <i class="fas fa-trash"></i>
                                        Delete
                                    </a>
                                    -->
                                </div>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <br />

    <!-- Page navigation and table exporting. -->
    <div class="row">
        <div class="col">
            <span>
                Page @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber)
                of
                @Model.PageCount
            </span>

            @Html.PagedListPager(Model, page => Url.Action("Index",
                new
                {
                    page,
                    sortOrder = ViewBag.CurrentSort,
                    currentFilter = ViewBag.CurrentFilter,
                    currentSearchFilter = ViewBag.CurrentSearchFilter,
                    currentLengthFilter = ViewBag.CurrentLengthFilter
                }))
        </div>
        <div class="col text-right">
            @using (Html.BeginForm("Export", "Coil", FormMethod.Post,
                new
                {
                    @id = "pdfForm"
                }))
            {
                <input type="hidden" id="tableHtml" name="tableHtml" />
                <button type="submit" class="btn btn-primary" onclick="setHtml()">Export Table</button>
            }
        </div>
    </div>
}
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/Scripts/jquery.unobtrusive-ajax.js")
    @Scripts.Render("~/Scripts/helpers/OnFilterChange.js")
    @Scripts.Render("~/Scripts/helpers/HtmlToPdf.js")
}