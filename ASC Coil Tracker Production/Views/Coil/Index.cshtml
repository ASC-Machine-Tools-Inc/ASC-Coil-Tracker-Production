@model PagedList.IPagedList<ASC_Coil_Tracker_Production.Models.COILTABLE>
@using PagedList.Mvc;
<link href="~/Content/PagedList.css" rel="stylesheet" type="text/css" />

@{ ViewBag.Title = "Index"; }

<div class="row mb-3">
    <div class="col-md-4">
        <a href="@Url.Action("Create")" class="btn btn-primary mb-1">
            Create New Coil Record
        </a>
    </div>
    <div class="col-md-4">
        @using (Html.BeginForm("Index", "Coil", FormMethod.Get))
        {<!-- hidden current fields -->
            @Html.Hidden("sortOrder", (object)ViewBag.CurrentSort);
            @Html.Hidden("currentFilter", (object)ViewBag.CurrentFilter);
            @Html.Hidden("currentSearchFilter", (object)ViewBag.CurrentSearchFilter);

            <label for="lengthFilter">Show:</label>
            @Html.DropDownList("LengthFilter", (SelectList)ViewBag.LengthList, new { @id = "lengthFilter", @class = "custom-select mx-2" });
        }
    </div>
    <div class="col-md-4">
        @using (Ajax.BeginForm("Index", "Coil", new AjaxOptions { HttpMethod = "Get" },
            new
            {
                @id = "searchForm",
                @class = "form-inline justify-content-end"
            }))
        {
            <!-- hidden current fields -->
            @Html.Hidden("sortOrder", (object)ViewBag.CurrentSort);
            @Html.Hidden("currentLengthFilter", (object)ViewBag.CurrentLengthFilter);

            @Html.DropDownList("SearchFilter", (SelectList)ViewBag.SearchList, new { @class = "custom-select mx-2" })
            @Html.TextBox("SearchString", ViewBag.CurrentFilter as string, new { @id = "searchString", @class = "form-control", @placeholder = "Type to start searching" })
        }
    </div>
</div>

<table class="table">
    <tr>
        <th>
            <a href="@Url.Action("Index", new
            {
                sortOrder = ViewBag.IDSortParm,
                currentFilter = ViewBag.CurrentFilter,
                currentSearchFilter = ViewBag.CurrentSearchFilter,
                currentLengthFilter = ViewBag.CurrentLengthFilter
            })">
                ID<i class="fa fa-fw fa-sort"></i>
            </a>
        </th>
        <th>
            @Html.DisplayNameFor(model => model.FirstOrDefault().COLOR)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.FirstOrDefault().TYPE)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.FirstOrDefault().GAUGE)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.FirstOrDefault().THICK)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.FirstOrDefault().WIDTH)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.FirstOrDefault().YIELD)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.FirstOrDefault().WEIGHT)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.FirstOrDefault().LENGTH)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.FirstOrDefault().NOTES)
        </th>
        <th></th>
    </tr>

    @foreach (var item in Model)
    {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.ID)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.COLOR)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.TYPE)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.GAUGE)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.THICK)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.WIDTH)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.YIELD)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.WEIGHT)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.LENGTH)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.NOTES)
            </td>
            <td>
                <div class="btn-group d-flex" role="group">
                    <button type="button" class="btn btn-outline-primary dropdown-toggle" data-toggle="dropdown">
                        Actions
                    </button>
                    <div class="dropdown-menu">
                        <a href="@Url.Action("Print", new { id=item.ID })" class="dropdown-item">
                            <i class="fas fa-print"></i>
                            Print
                        </a>
                        <a href="@Url.Action("Edit", new { id=item.ID })" class="dropdown-item">
                            <i class="fas fa-edit"></i>
                            Edit
                        </a>
                        <a href="@Url.Action("Details", new { id=item.ID })" class="dropdown-item">
                            <i class="fas fa-info-circle"></i>
                            Details
                        </a>
                        <a href="@Url.Action("Create", "HistoryEvent", new { coilID = item.ID })" class="dropdown-item">
                            <i class="fas fa-plus"></i>
                            Add Record
                        </a>
                        <!-- delete functionality disabled for coils
                        <a href="@Url.Action("Delete", new { id=item.ID })" class="dropdown-item">
                            <i class="fas fa-trash"></i>
                            Delete
                        </a>
                            -->
                    </div>
                </div>
            </td>
        </tr>

    }
</table>
<br />
    Page @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount

    @Html.PagedListPager(Model, page => Url.Action("Index",
        new
        {
            page,
            sortOrder = ViewBag.CurrentSort,
            currentFilter = ViewBag.CurrentFilter,
            currentSearchFilter = ViewBag.CurrentSearchFilter,
            currentLengthFilter = ViewBag.CurrentLengthFilter
        }))

    @section Scripts {
        @Scripts.Render("~/bundles/jqueryval")
        @Scripts.Render("~/Scripts/jquery.unobtrusive-ajax.js")
        @Scripts.Render("~/Scripts/helpers/OnFilterChange.js")
    }